using System.Diagnostics;

namespace unitTestProject
{
    /// <summary>
    /// Tests specifically for the "View Excel", "View Images", and "View Text" buttons
    /// to ensure they work correctly together as an integrated feature set.
    /// This test class focuses on their collective behavior and shared implementation patterns.
    /// </summary>
    [TestClass]
    public class ThreeViewButtonsTests
    {
        // Path to the temporary test output folder
        private string _testOutputFolder;
        
        // Lists to track files by type for validation
        private List<string> _excelFiles;  // Excel files (.xlsx)
        private List<string> _imageFiles;  // Image files (.jpg, .png, etc.)
        private List<string> _textFiles;   // Text files (.txt, .csv, etc.)
        
        /// <summary>
        /// Setup method that runs before each test.
        /// Creates a test environment with files of all three types.
        /// </summary>
        [TestInitialize]
        public void Setup()
        {
            // Create a temporary output folder with unique GUID to avoid conflicts
            _testOutputFolder = Path.Combine(Path.GetTempPath(), $"ocr_three_buttons_test_{Guid.NewGuid():N}");
            Directory.CreateDirectory(_testOutputFolder);
            
            // Initialize file tracking lists
            _excelFiles = new List<string>();
            _imageFiles = new List<string>();
            _textFiles = new List<string>();
            
            // Create test files for all button types with appropriate extensions
            CreateAllTestFiles();
        }
        
        /// <summary>
        /// Cleanup method that runs after each test.
        /// Removes the temporary test directory and all its contents.
        /// </summary>
        [TestCleanup]
        public void Cleanup()
        {
            // Clean up test directory with all files
            try
            {
                if (Directory.Exists(_testOutputFolder))
                {
                    Directory.Delete(_testOutputFolder, true);
                }
            }
            catch (Exception ex)
            {
                // Log but don't fail test if cleanup fails
                // This could happen if a file is still being accessed
                Console.WriteLine($"Warning: Clean-up failed: {ex.Message}");
                // Non-critical failure, don't fail the test
            }
        }
        
        /// <summary>
        /// Creates test files for all three button types.
        /// Centralizes file creation to ensure all test types are covered
        /// and tracked properly.
        /// </summary>
        private void CreateAllTestFiles()
        {
            try
            {
                // Create each type of test file
                CreateExcelFiles();  // Excel files for ViewExcelButton
                CreateImageFiles();  // Image files for ViewImagesButton
                CreateTextFiles();   // Text files for ViewTextButton
                
                // Create a subfolder with mixed content to test recursive search
                // This validates that all three buttons can find files in subdirectories
                string subfolderPath = Path.Combine(_testOutputFolder, "mixed_content");
                Directory.CreateDirectory(subfolderPath);
                
                // Add one file of each type to the subfolder
                // Excel file in subfolder
                string excelPath = Path.Combine(subfolderPath, "subfolder_report.xlsx");
                File.WriteAllBytes(excelPath, new byte[100]);
                _excelFiles.Add(excelPath);
                
                // Image file in subfolder
                string imagePath = Path.Combine(subfolderPath, "subfolder_image.png");
                File.WriteAllBytes(imagePath, new byte[100]);
                _imageFiles.Add(imagePath);
                
                // Text file in subfolder
                string textPath = Path.Combine(subfolderPath, "subfolder_notes.txt");
                File.WriteAllText(textPath, "Sample content in subfolder");
                _textFiles.Add(textPath);
            }
            catch (Exception ex)
            {
                // Log error and rethrow to fail the test
                Console.WriteLine($"Error creating test files: {ex.Message}");
                throw;
            }
        }
        
        /// <summary>
        /// Creates Excel test files (.xlsx) for testing the View Excel button.
        /// </summary>
        private void CreateExcelFiles()
        {
            // Create Excel files in the main folder
            // These simulate result reports generated by OCR processing
            for (int i = 1; i <= 2; i++)
            {
                string path = Path.Combine(_testOutputFolder, $"excel_report{i}.xlsx");
                File.WriteAllBytes(path, new byte[100]);  // Empty placeholder Excel file
                _excelFiles.Add(path);  // Track for validation
            }
        }
        
        /// <summary>
        /// Creates Image test files with various extensions for testing the View Images button.
        /// </summary>
        private void CreateImageFiles()
        {
            // Create different image types with common image extensions
            // These simulate different image formats that might be in the output folder
            Dictionary<string, byte[]> imageTypes = new Dictionary<string, byte[]>
            {
                { ".jpg", new byte[100] },  // JPEG format
                { ".png", new byte[100] },  // PNG format
                { ".bmp", new byte[100] }   // BMP format
            };
            
            // Create each image type and track for validation
            foreach (var type in imageTypes)
            {
                string path = Path.Combine(_testOutputFolder, $"test_image{type.Key}");
                File.WriteAllBytes(path, type.Value);  // Empty placeholder image file
                _imageFiles.Add(path);  // Track for validation
            }
        }
        
        /// <summary>
        /// Creates Text test files with various extensions for testing the View Text button.
        /// </summary>
        private void CreateTextFiles()
        {
            // Create different text file types with sample content
            // These simulate different text outputs that might be generated
            Dictionary<string, string> textTypes = new Dictionary<string, string>
            {
                { ".txt", "Sample text file content" },  // Basic text file
                { ".csv", "id,name,value\n1,test,100" },  // CSV data
                { ".json", "{ \"name\": \"test\", \"value\": 100 }" }  // JSON data
            };
            
            // Create each text type and track for validation
            foreach (var type in textTypes)
            {
                string path = Path.Combine(_testOutputFolder, $"test_file{type.Key}");
                File.WriteAllText(path, type.Value);  // Text file with sample content
                _textFiles.Add(path);  // Track for validation
            }
        }
        
        /// <summary>
        /// Tests that all three view buttons can find their respective file types correctly.
        /// Verifies that the file detection logic works for each button type.
        /// </summary>
        [TestMethod]
        public void AllThreeButtons_FindCorrectFileTypes()
        {
            // Test Excel file detection (View Excel button)
            // This simulates the logic in ViewExcelButton_Click
            var excelFiles = Directory.GetFiles(_testOutputFolder, "*.xlsx", SearchOption.AllDirectories);
            Assert.AreEqual(_excelFiles.Count, excelFiles.Length, 
                "View Excel should find correct number of Excel files");
            
            // Test image file detection (View Images button)
            // This simulates the logic in ViewImagesButton_Click
            var imageExtensions = new[] { ".jpg", ".jpeg", ".png", ".bmp", ".tiff", ".gif" };
            var imageFiles = Directory.GetFiles(_testOutputFolder, "*.*", SearchOption.AllDirectories)
                .Where(file => imageExtensions.Contains(Path.GetExtension(file).ToLower()))
                .ToArray();
            Assert.AreEqual(_imageFiles.Count, imageFiles.Length, 
                "View Images should find correct number of image files");
            
            // Test text file detection (View Text button)
            // This simulates the logic in ViewTextButton_Click
            var textExtensions = new[] { ".txt", ".csv", ".json", ".xml", ".html" };
            var textFiles = Directory.GetFiles(_testOutputFolder, "*.*", SearchOption.AllDirectories)
                .Where(file => textExtensions.Contains(Path.GetExtension(file).ToLower()))
                .ToArray();
            Assert.AreEqual(_textFiles.Count, textFiles.Length, 
                "View Text should find correct number of text files");
        }
        
        /// <summary>
        /// Tests that each button only finds its intended file types and not others.
        /// Verifies that the file filtering logic correctly separates different file types.
        /// </summary>
        [TestMethod]
        public void EachButton_DoesNotShowOtherFileTypes()
        {
            // Test Excel button doesn't show image or text files
            // This ensures the Excel button only shows Excel files
            var excelFiles = Directory.GetFiles(_testOutputFolder, "*.xlsx", SearchOption.AllDirectories);
            foreach (var file in excelFiles)
            {
                Assert.IsTrue(_excelFiles.Contains(file), "Excel files should only include Excel files");
                Assert.IsFalse(_imageFiles.Contains(file), "Excel files should not include image files");
                Assert.IsFalse(_textFiles.Contains(file), "Excel files should not include text files");
            }
            
            // Define image extensions for testing Image button
            var imageExtensions = new[] { ".jpg", ".jpeg", ".png", ".bmp", ".tiff", ".gif" };
            
            // Test Image button doesn't show Excel or text files
            // This ensures the Images button only shows image files
            var imageFiles = Directory.GetFiles(_testOutputFolder, "*.*", SearchOption.AllDirectories)
                .Where(file => imageExtensions.Contains(Path.GetExtension(file).ToLower()))
                .ToArray();
                
            foreach (var file in imageFiles)
            {
                Assert.IsTrue(_imageFiles.Contains(file), "Image files should only include image files");
                Assert.IsFalse(_excelFiles.Contains(file), "Image files should not include Excel files");
                Assert.IsFalse(_textFiles.Contains(file), "Image files should not include text files");
            }
            
            // Define text extensions for testing Text button
            var textExtensions = new[] { ".txt", ".csv", ".json", ".xml", ".html" };
            
            // Test Text button doesn't show Excel or image files
            // This ensures the Text button only shows text files
            var textFiles = Directory.GetFiles(_testOutputFolder, "*.*", SearchOption.AllDirectories)
                .Where(file => textExtensions.Contains(Path.GetExtension(file).ToLower()))
                .ToArray();
                
            foreach (var file in textFiles)
            {
                Assert.IsTrue(_textFiles.Contains(file), "Text files should only include text files");
                Assert.IsFalse(_excelFiles.Contains(file), "Text files should not include Excel files");
                Assert.IsFalse(_imageFiles.Contains(file), "Text files should not include image files");
            }
        }
        
        /// <summary>
        /// Tests that all three buttons share the same visibility behavior.
        /// Verifies that all buttons are hidden/shown together based on processing state.
        /// </summary>
        [TestMethod]
        public void ButtonVisibility_AllButtonsShareSameVisibilityState()
        {
            // Simulate the processing state that controls button visibility
            bool isProcessingCompleted = false;
            
            // Test Case 1: Initial state - all buttons should be hidden
            // before processing is completed
            bool expectedVisibility = isProcessingCompleted;
            Assert.IsFalse(expectedVisibility, 
                "All view buttons should be hidden when processing is not completed");
            
            // Test Case 2: After processing completes - all buttons should be visible
            isProcessingCompleted = true;
            expectedVisibility = isProcessingCompleted;
            Assert.IsTrue(expectedVisibility, 
                "All view buttons should be visible when processing is completed");
        }
        
        /// <summary>
        /// Tests that the file opening method works consistently for all file types.
        /// Verifies that the same approach is used to open all types of files.
        /// </summary>
        [TestMethod]
        public void OpenFile_SameMethodWorksForAllFileTypes()
        {
            // Get one test file of each type
            string excelFile = _excelFiles.FirstOrDefault() ?? "";
            string imageFile = _imageFiles.FirstOrDefault() ?? "";
            string textFile = _textFiles.FirstOrDefault() ?? "";
            
            // Verify test files exist
            Assert.IsTrue(File.Exists(excelFile), "Excel test file should exist");
            Assert.IsTrue(File.Exists(imageFile), "Image test file should exist");
            Assert.IsTrue(File.Exists(textFile), "Text test file should exist");
            
            // Test that the ProcessStartInfo is configured the same way for all file types
            // This simulates the OpenFile method implementation
            
            // Excel file ProcessStartInfo - for ViewExcelButton
            ProcessStartInfo excelStartInfo = new ProcessStartInfo
            {
                FileName = excelFile,
                UseShellExecute = true  // Must be true to open with system default application
            };
            
            // Image file ProcessStartInfo - for ViewImagesButton
            ProcessStartInfo imageStartInfo = new ProcessStartInfo
            {
                FileName = imageFile,
                UseShellExecute = true  // Must be true to open with system default application
            };
            
            // Text file ProcessStartInfo - for ViewTextButton
            ProcessStartInfo textStartInfo = new ProcessStartInfo
            {
                FileName = textFile,
                UseShellExecute = true  // Must be true to open with system default application
            };
            
            // Verify UseShellExecute is true for all file types
            // This is crucial for opening files with default system applications
            Assert.IsTrue(excelStartInfo.UseShellExecute, "Excel files should use shell execute");
            Assert.IsTrue(imageStartInfo.UseShellExecute, "Image files should use shell execute");
            Assert.IsTrue(textStartInfo.UseShellExecute, "Text files should use shell execute");
            
            // Verify FileName is set correctly for all file types
            Assert.AreEqual(excelFile, excelStartInfo.FileName, "Excel FileName should be set to file path");
            Assert.AreEqual(imageFile, imageStartInfo.FileName, "Image FileName should be set to file path");
            Assert.AreEqual(textFile, textStartInfo.FileName, "Text FileName should be set to file path");
        }
    }
} 